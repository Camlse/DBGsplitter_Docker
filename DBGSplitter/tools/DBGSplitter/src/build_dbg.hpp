/*****************************************************************************
 *   GATB : Genome Assembly Tool Box
 *   Copyright (C) 2014  INRIA
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

#ifndef _TOOL_build_dbg_HPP_
#define _TOOL_build_dbg_HPP_

/********************************************************************************/
#include <gatb/gatb_core.hpp>
/********************************************************************************/
#define BOOST_NO_CXX11_SCOPED_ENUMS
#include <boost/filesystem.hpp>
#undef BOOST_NO_CXX11_SCOPED_ENUMS
#include "global.h"
#include "GraphOutput.h"
#include <boost/archive/text_oarchive.hpp>
#include <set>
#include <queue>
#include <algorithm>
#include <cmath>
#include <vector>
#include <limits>
#include <boost/timer/timer.hpp>
#include <boost/chrono.hpp>
#include "Utils.h"




////////////////////////////////////////////////////////////////////////////////
//
// THIS FILE IS AUTOMATICALLY GENERATED...
//
// THIS IS A SIMPLE EXAMPLE HOW TO USE THE Tool CLASS. IF YOU WANT MORE FEATURES,
// YOU CAN HAVE A LOOK AT THE ToyTool SNIPPET HERE:
//
//      http://gatb-core.gforge.inria.fr/snippets_tools.html
//
////////////////////////////////////////////////////////////////////////////////


//class to build the .nodes and .edges files
class EdgeConstructionVisitor : public boost::static_visitor<>    {
private:
    const string& linear_seqs_name;
    bool verbose;

public:
    EdgeConstructionVisitor (const string &linear_seqs_name, bool verbose=false) : linear_seqs_name(linear_seqs_name), verbose(verbose){}
    template<size_t span>
    void operator() (GraphOutput<span>& graphOutput) const
    {
        graphOutput.open();
        graphOutput.load_nodes_extremities(linear_seqs_name, verbose);
        graphOutput.construct_graph(linear_seqs_name, verbose);
        graphOutput.close();
    }
};

class build_dbg : public Tool
{
private:
    //variables concerning conditions and replicates
    map<string, vector<string>> condRepl2Reads;
    map<string, int> reads2CondReplIndex;
    int nbConditions;
    int nbReplicates;

    void populateParser();

    void checkReadFiles();

    //create the reads file given a condRepl2Reads
    void createReadsFile(const string &readsFile);

    //function used to build the unitigs
    void buildUnitigs (gatb::core::debruijn::impl::Graph& graph, //the graph where to build the unitigs
                       const string& prefix, //the prefix to use for the files
                       SolidKmerOracle *solidKmerOracle = NULL, //the solid kmer oracle - will store the unitigs and allow us for query for solid kmers, if != NULL
        /* parameters for computing the edge counts
         * the edge count is the count of the (k+1)-mer in the read sets
         * it is only computed if these 3 parameters are not null */
                       gatb::core::debruijn::impl::Graph *graphKP1=NULL, //the graph with k+1-mers
                       SolidKmerOracle *solidKmerOracleKP1 = NULL, //the solid kmer oracle of the k+1-mer graph - allowing us to remove the FPs in the k+1-graph
                       vector<vector<int>> *edgeIndexKP1_2_CountVector=NULL, //the edge index to count vector
        /* other parameters */
                       bool computeStats=false, //compute the stats to use ML to infer which nodes are due to repeats
                       int maxBetaLevel=0, //the maximum beta level
                       bool verbose=false); //verbosity level

public:

    // Constructor
    build_dbg ();

    // Actual job done by the tool is here
    void execute ();

    //overriding this in order to exit the tool when finding a problem with the arguments
    IProperties* run (int argc, char* argv[])
    {
        IProperties* toReturn = Tool::run(argc, argv);
        if (!toReturn)
            std::exit(1);
        return toReturn;
    }
};

/********************************************************************************/

#endif

